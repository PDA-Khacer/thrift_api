// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apiservice

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type SinhVienSlices []*SinhVien

func SinhVienSlicesPtr(v SinhVienSlices) *SinhVienSlices { return &v }

type LopHocPhanSlices []*LopHocPhan

func LopHocPhanSlicesPtr(v LopHocPhanSlices) *LopHocPhanSlices { return &v }

type IDSinhVienSlices []string

func IDSinhVienSlicesPtr(v IDSinhVienSlices) *IDSinhVienSlices { return &v }

// Attributes:
//  - Ma
//  - HoTen
//  - GioiTinh
//  - NgaySinh
//  - Sdt
type SinhVien struct {
	Ma       string `thrift:"ma,1" db:"ma" json:"ma"`
	HoTen    string `thrift:"hoTen,2" db:"hoTen" json:"hoTen"`
	GioiTinh int32  `thrift:"gioiTinh,3" db:"gioiTinh" json:"gioiTinh"`
	NgaySinh string `thrift:"ngaySinh,4" db:"ngaySinh" json:"ngaySinh"`
	Sdt      string `thrift:"sdt,5" db:"sdt" json:"sdt"`
}

func NewSinhVien() *SinhVien {
	return &SinhVien{}
}

func (p *SinhVien) GetMa() string {
	return p.Ma
}

func (p *SinhVien) GetHoTen() string {
	return p.HoTen
}

func (p *SinhVien) GetGioiTinh() int32 {
	return p.GioiTinh
}

func (p *SinhVien) GetNgaySinh() string {
	return p.NgaySinh
}

func (p *SinhVien) GetSdt() string {
	return p.Sdt
}
func (p *SinhVien) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SinhVien) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ma = v
	}
	return nil
}

func (p *SinhVien) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HoTen = v
	}
	return nil
}

func (p *SinhVien) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GioiTinh = v
	}
	return nil
}

func (p *SinhVien) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NgaySinh = v
	}
	return nil
}

func (p *SinhVien) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Sdt = v
	}
	return nil
}

func (p *SinhVien) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SinhVien"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SinhVien) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ma", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ma: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ma)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ma (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ma: ", p), err)
	}
	return err
}

func (p *SinhVien) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hoTen", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hoTen: ", p), err)
	}
	if err := oprot.WriteString(string(p.HoTen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hoTen (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hoTen: ", p), err)
	}
	return err
}

func (p *SinhVien) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gioiTinh", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gioiTinh: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GioiTinh)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gioiTinh (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gioiTinh: ", p), err)
	}
	return err
}

func (p *SinhVien) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ngaySinh", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ngaySinh: ", p), err)
	}
	if err := oprot.WriteString(string(p.NgaySinh)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ngaySinh (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ngaySinh: ", p), err)
	}
	return err
}

func (p *SinhVien) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sdt", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sdt: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sdt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sdt (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sdt: ", p), err)
	}
	return err
}

func (p *SinhVien) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SinhVien(%+v)", *p)
}

// Attributes:
//  - Ma
//  - Ten
//  - GiaoVien
type LopHocPhan struct {
	Ma       string `thrift:"ma,1" db:"ma" json:"ma"`
	Ten      string `thrift:"ten,2" db:"ten" json:"ten"`
	GiaoVien string `thrift:"giaoVien,3" db:"giaoVien" json:"giaoVien"`
}

func NewLopHocPhan() *LopHocPhan {
	return &LopHocPhan{}
}

func (p *LopHocPhan) GetMa() string {
	return p.Ma
}

func (p *LopHocPhan) GetTen() string {
	return p.Ten
}

func (p *LopHocPhan) GetGiaoVien() string {
	return p.GiaoVien
}
func (p *LopHocPhan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LopHocPhan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ma = v
	}
	return nil
}

func (p *LopHocPhan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Ten = v
	}
	return nil
}

func (p *LopHocPhan) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GiaoVien = v
	}
	return nil
}

func (p *LopHocPhan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LopHocPhan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LopHocPhan) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ma", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ma: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ma)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ma (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ma: ", p), err)
	}
	return err
}

func (p *LopHocPhan) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ten", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ten: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ten)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ten (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ten: ", p), err)
	}
	return err
}

func (p *LopHocPhan) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("giaoVien", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:giaoVien: ", p), err)
	}
	if err := oprot.WriteString(string(p.GiaoVien)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.giaoVien (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:giaoVien: ", p), err)
	}
	return err
}

func (p *LopHocPhan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LopHocPhan(%+v)", *p)
}

// Attributes:
//  - MaLHP
//  - DsSV
type DanhSachSinhVienLopHocPhan struct {
	MaLHP string           `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
	DsSV  IDSinhVienSlices `thrift:"dsSV,2" db:"dsSV" json:"dsSV"`
}

func NewDanhSachSinhVienLopHocPhan() *DanhSachSinhVienLopHocPhan {
	return &DanhSachSinhVienLopHocPhan{}
}

func (p *DanhSachSinhVienLopHocPhan) GetMaLHP() string {
	return p.MaLHP
}

func (p *DanhSachSinhVienLopHocPhan) GetDsSV() IDSinhVienSlices {
	return p.DsSV
}
func (p *DanhSachSinhVienLopHocPhan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DanhSachSinhVienLopHocPhan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *DanhSachSinhVienLopHocPhan) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(IDSinhVienSlices, 0, size)
	p.DsSV = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.DsSV = append(p.DsSV, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DanhSachSinhVienLopHocPhan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DanhSachSinhVienLopHocPhan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DanhSachSinhVienLopHocPhan) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *DanhSachSinhVienLopHocPhan) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dsSV", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dsSV: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.DsSV)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DsSV {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dsSV: ", p), err)
	}
	return err
}

func (p *DanhSachSinhVienLopHocPhan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DanhSachSinhVienLopHocPhan(%+v)", *p)
}

type ManagerStudent interface {
	Init(ctx context.Context) (err error)
	// Parameters:
	//  - LopHP
	AddLopHP(ctx context.Context, lopHP *LopHocPhan) (r int32, err error)
	// Parameters:
	//  - Sv
	//  - MaLHP
	AddSinhVienVaoLop(ctx context.Context, sv string, maLHP string) (r int32, err error)
	// Parameters:
	//  - Lsv
	//  - MaLHP
	AddSinhVienSlicesVaoLop(ctx context.Context, lsv SinhVienSlices, maLHP string) (r int32, err error)
	// Parameters:
	//  - MaLHP
	ExistsLopHP(ctx context.Context, maLHP string) (r int32, err error)
	// Parameters:
	//  - MaLHP
	//  - MaSinhVien
	ExistsSinhVienTrongLop(ctx context.Context, maLHP string, maSinhVien string) (r int32, err error)
	// Parameters:
	//  - Ma
	GetLopHocPhan(ctx context.Context, ma string) (r *LopHocPhan, err error)
	GetLopHocPhanSlice(ctx context.Context) (r LopHocPhanSlices, err error)
	// Parameters:
	//  - Ma
	GetLopHocPhanOfSinhVien(ctx context.Context, ma string) (r LopHocPhanSlices, err error)
	// Parameters:
	//  - MaLHP
	GetSinhVienLHP(ctx context.Context, maLHP string) (r SinhVienSlices, err error)
	// Parameters:
	//  - MaLHP
	DelLopHP(ctx context.Context, maLHP string) (r int32, err error)
	// Parameters:
	//  - MaLHP
	//  - MaSV
	PutSVOutLopHP(ctx context.Context, maLHP string, maSV string) (r int32, err error)
	// Parameters:
	//  - Sv
	AddSinhVien(ctx context.Context, sv *SinhVien) (r int32, err error)
	// Parameters:
	//  - MaSV
	ExistsSinhVien(ctx context.Context, maSV string) (r int32, err error)
	// Parameters:
	//  - MaSV
	GetSinhVien(ctx context.Context, maSV string) (r *SinhVien, err error)
	// Parameters:
	//  - MaSV
	DelSinhVien(ctx context.Context, maSV string) (r int32, err error)
	// Parameters:
	//  - Key
	SearchSinhVien(ctx context.Context, key string) (r SinhVienSlices, err error)
	// Parameters:
	//  - Sv
	UpdateSinhVien(ctx context.Context, sv *SinhVien) (r int32, err error)
	// Parameters:
	//  - Lhp
	UpdateLopHP(ctx context.Context, lhp *LopHocPhan) (r int32, err error)
}

type ManagerStudentClient struct {
	c thrift.TClient
}

func NewManagerStudentClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewManagerStudentClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewManagerStudentClient(c thrift.TClient) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: c,
	}
}

func (p *ManagerStudentClient) Client_() thrift.TClient {
	return p.c
}
func (p *ManagerStudentClient) Init(ctx context.Context) (err error) {
	var _args1 ManagerStudentInitArgs
	var _result2 ManagerStudentInitResult
	if err = p.Client_().Call(ctx, "init", &_args1, &_result2); err != nil {
		return
	}
	return nil
}

// Parameters:
//  - LopHP
func (p *ManagerStudentClient) AddLopHP(ctx context.Context, lopHP *LopHocPhan) (r int32, err error) {
	var _args3 ManagerStudentAddLopHPArgs
	_args3.LopHP = lopHP
	var _result4 ManagerStudentAddLopHPResult
	if err = p.Client_().Call(ctx, "addLopHP", &_args3, &_result4); err != nil {
		return
	}
	return _result4.GetSuccess(), nil
}

// Parameters:
//  - Sv
//  - MaLHP
func (p *ManagerStudentClient) AddSinhVienVaoLop(ctx context.Context, sv string, maLHP string) (r int32, err error) {
	var _args5 ManagerStudentAddSinhVienVaoLopArgs
	_args5.Sv = sv
	_args5.MaLHP = maLHP
	var _result6 ManagerStudentAddSinhVienVaoLopResult
	if err = p.Client_().Call(ctx, "addSinhVienVaoLop", &_args5, &_result6); err != nil {
		return
	}
	return _result6.GetSuccess(), nil
}

// Parameters:
//  - Lsv
//  - MaLHP
func (p *ManagerStudentClient) AddSinhVienSlicesVaoLop(ctx context.Context, lsv SinhVienSlices, maLHP string) (r int32, err error) {
	var _args7 ManagerStudentAddSinhVienSlicesVaoLopArgs
	_args7.Lsv = lsv
	_args7.MaLHP = maLHP
	var _result8 ManagerStudentAddSinhVienSlicesVaoLopResult
	if err = p.Client_().Call(ctx, "addSinhVienSlicesVaoLop", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

// Parameters:
//  - MaLHP
func (p *ManagerStudentClient) ExistsLopHP(ctx context.Context, maLHP string) (r int32, err error) {
	var _args9 ManagerStudentExistsLopHPArgs
	_args9.MaLHP = maLHP
	var _result10 ManagerStudentExistsLopHPResult
	if err = p.Client_().Call(ctx, "existsLopHP", &_args9, &_result10); err != nil {
		return
	}
	return _result10.GetSuccess(), nil
}

// Parameters:
//  - MaLHP
//  - MaSinhVien
func (p *ManagerStudentClient) ExistsSinhVienTrongLop(ctx context.Context, maLHP string, maSinhVien string) (r int32, err error) {
	var _args11 ManagerStudentExistsSinhVienTrongLopArgs
	_args11.MaLHP = maLHP
	_args11.MaSinhVien = maSinhVien
	var _result12 ManagerStudentExistsSinhVienTrongLopResult
	if err = p.Client_().Call(ctx, "existsSinhVienTrongLop", &_args11, &_result12); err != nil {
		return
	}
	return _result12.GetSuccess(), nil
}

// Parameters:
//  - Ma
func (p *ManagerStudentClient) GetLopHocPhan(ctx context.Context, ma string) (r *LopHocPhan, err error) {
	var _args13 ManagerStudentGetLopHocPhanArgs
	_args13.Ma = ma
	var _result14 ManagerStudentGetLopHocPhanResult
	if err = p.Client_().Call(ctx, "getLopHocPhan", &_args13, &_result14); err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

func (p *ManagerStudentClient) GetLopHocPhanSlice(ctx context.Context) (r LopHocPhanSlices, err error) {
	var _args15 ManagerStudentGetLopHocPhanSliceArgs
	var _result16 ManagerStudentGetLopHocPhanSliceResult
	if err = p.Client_().Call(ctx, "getLopHocPhanSlice", &_args15, &_result16); err != nil {
		return
	}
	return _result16.GetSuccess(), nil
}

// Parameters:
//  - Ma
func (p *ManagerStudentClient) GetLopHocPhanOfSinhVien(ctx context.Context, ma string) (r LopHocPhanSlices, err error) {
	var _args17 ManagerStudentGetLopHocPhanOfSinhVienArgs
	_args17.Ma = ma
	var _result18 ManagerStudentGetLopHocPhanOfSinhVienResult
	if err = p.Client_().Call(ctx, "getLopHocPhanOfSinhVien", &_args17, &_result18); err != nil {
		return
	}
	return _result18.GetSuccess(), nil
}

// Parameters:
//  - MaLHP
func (p *ManagerStudentClient) GetSinhVienLHP(ctx context.Context, maLHP string) (r SinhVienSlices, err error) {
	var _args19 ManagerStudentGetSinhVienLHPArgs
	_args19.MaLHP = maLHP
	var _result20 ManagerStudentGetSinhVienLHPResult
	if err = p.Client_().Call(ctx, "getSinhVienLHP", &_args19, &_result20); err != nil {
		return
	}
	return _result20.GetSuccess(), nil
}

// Parameters:
//  - MaLHP
func (p *ManagerStudentClient) DelLopHP(ctx context.Context, maLHP string) (r int32, err error) {
	var _args21 ManagerStudentDelLopHPArgs
	_args21.MaLHP = maLHP
	var _result22 ManagerStudentDelLopHPResult
	if err = p.Client_().Call(ctx, "delLopHP", &_args21, &_result22); err != nil {
		return
	}
	return _result22.GetSuccess(), nil
}

// Parameters:
//  - MaLHP
//  - MaSV
func (p *ManagerStudentClient) PutSVOutLopHP(ctx context.Context, maLHP string, maSV string) (r int32, err error) {
	var _args23 ManagerStudentPutSVOutLopHPArgs
	_args23.MaLHP = maLHP
	_args23.MaSV = maSV
	var _result24 ManagerStudentPutSVOutLopHPResult
	if err = p.Client_().Call(ctx, "putSVOutLopHP", &_args23, &_result24); err != nil {
		return
	}
	return _result24.GetSuccess(), nil
}

// Parameters:
//  - Sv
func (p *ManagerStudentClient) AddSinhVien(ctx context.Context, sv *SinhVien) (r int32, err error) {
	var _args25 ManagerStudentAddSinhVienArgs
	_args25.Sv = sv
	var _result26 ManagerStudentAddSinhVienResult
	if err = p.Client_().Call(ctx, "addSinhVien", &_args25, &_result26); err != nil {
		return
	}
	return _result26.GetSuccess(), nil
}

// Parameters:
//  - MaSV
func (p *ManagerStudentClient) ExistsSinhVien(ctx context.Context, maSV string) (r int32, err error) {
	var _args27 ManagerStudentExistsSinhVienArgs
	_args27.MaSV = maSV
	var _result28 ManagerStudentExistsSinhVienResult
	if err = p.Client_().Call(ctx, "existsSinhVien", &_args27, &_result28); err != nil {
		return
	}
	return _result28.GetSuccess(), nil
}

// Parameters:
//  - MaSV
func (p *ManagerStudentClient) GetSinhVien(ctx context.Context, maSV string) (r *SinhVien, err error) {
	var _args29 ManagerStudentGetSinhVienArgs
	_args29.MaSV = maSV
	var _result30 ManagerStudentGetSinhVienResult
	if err = p.Client_().Call(ctx, "getSinhVien", &_args29, &_result30); err != nil {
		return
	}
	return _result30.GetSuccess(), nil
}

// Parameters:
//  - MaSV
func (p *ManagerStudentClient) DelSinhVien(ctx context.Context, maSV string) (r int32, err error) {
	var _args31 ManagerStudentDelSinhVienArgs
	_args31.MaSV = maSV
	var _result32 ManagerStudentDelSinhVienResult
	if err = p.Client_().Call(ctx, "delSinhVien", &_args31, &_result32); err != nil {
		return
	}
	return _result32.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *ManagerStudentClient) SearchSinhVien(ctx context.Context, key string) (r SinhVienSlices, err error) {
	var _args33 ManagerStudentSearchSinhVienArgs
	_args33.Key = key
	var _result34 ManagerStudentSearchSinhVienResult
	if err = p.Client_().Call(ctx, "searchSinhVien", &_args33, &_result34); err != nil {
		return
	}
	return _result34.GetSuccess(), nil
}

// Parameters:
//  - Sv
func (p *ManagerStudentClient) UpdateSinhVien(ctx context.Context, sv *SinhVien) (r int32, err error) {
	var _args35 ManagerStudentUpdateSinhVienArgs
	_args35.Sv = sv
	var _result36 ManagerStudentUpdateSinhVienResult
	if err = p.Client_().Call(ctx, "UpdateSinhVien", &_args35, &_result36); err != nil {
		return
	}
	return _result36.GetSuccess(), nil
}

// Parameters:
//  - Lhp
func (p *ManagerStudentClient) UpdateLopHP(ctx context.Context, lhp *LopHocPhan) (r int32, err error) {
	var _args37 ManagerStudentUpdateLopHPArgs
	_args37.Lhp = lhp
	var _result38 ManagerStudentUpdateLopHPResult
	if err = p.Client_().Call(ctx, "UpdateLopHP", &_args37, &_result38); err != nil {
		return
	}
	return _result38.GetSuccess(), nil
}

type ManagerStudentProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ManagerStudent
}

func (p *ManagerStudentProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ManagerStudentProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ManagerStudentProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewManagerStudentProcessor(handler ManagerStudent) *ManagerStudentProcessor {

	self39 := &ManagerStudentProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self39.processorMap["init"] = &managerStudentProcessorInit{handler: handler}
	self39.processorMap["addLopHP"] = &managerStudentProcessorAddLopHP{handler: handler}
	self39.processorMap["addSinhVienVaoLop"] = &managerStudentProcessorAddSinhVienVaoLop{handler: handler}
	self39.processorMap["addSinhVienSlicesVaoLop"] = &managerStudentProcessorAddSinhVienSlicesVaoLop{handler: handler}
	self39.processorMap["existsLopHP"] = &managerStudentProcessorExistsLopHP{handler: handler}
	self39.processorMap["existsSinhVienTrongLop"] = &managerStudentProcessorExistsSinhVienTrongLop{handler: handler}
	self39.processorMap["getLopHocPhan"] = &managerStudentProcessorGetLopHocPhan{handler: handler}
	self39.processorMap["getLopHocPhanSlice"] = &managerStudentProcessorGetLopHocPhanSlice{handler: handler}
	self39.processorMap["getLopHocPhanOfSinhVien"] = &managerStudentProcessorGetLopHocPhanOfSinhVien{handler: handler}
	self39.processorMap["getSinhVienLHP"] = &managerStudentProcessorGetSinhVienLHP{handler: handler}
	self39.processorMap["delLopHP"] = &managerStudentProcessorDelLopHP{handler: handler}
	self39.processorMap["putSVOutLopHP"] = &managerStudentProcessorPutSVOutLopHP{handler: handler}
	self39.processorMap["addSinhVien"] = &managerStudentProcessorAddSinhVien{handler: handler}
	self39.processorMap["existsSinhVien"] = &managerStudentProcessorExistsSinhVien{handler: handler}
	self39.processorMap["getSinhVien"] = &managerStudentProcessorGetSinhVien{handler: handler}
	self39.processorMap["delSinhVien"] = &managerStudentProcessorDelSinhVien{handler: handler}
	self39.processorMap["searchSinhVien"] = &managerStudentProcessorSearchSinhVien{handler: handler}
	self39.processorMap["UpdateSinhVien"] = &managerStudentProcessorUpdateSinhVien{handler: handler}
	self39.processorMap["UpdateLopHP"] = &managerStudentProcessorUpdateLopHP{handler: handler}
	return self39
}

func (p *ManagerStudentProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x40 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x40.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x40

}

type managerStudentProcessorInit struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorInit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentInitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("init", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentInitResult{}
	var err2 error
	if err2 = p.handler.Init(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init: "+err2.Error())
		oprot.WriteMessageBegin("init", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("init", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddLopHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddLopHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddLopHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddLopHPResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddLopHP(ctx, args.LopHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLopHP: "+err2.Error())
		oprot.WriteMessageBegin("addLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addLopHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddSinhVienVaoLop struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddSinhVienVaoLop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddSinhVienVaoLopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSinhVienVaoLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddSinhVienVaoLopResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddSinhVienVaoLop(ctx, args.Sv, args.MaLHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSinhVienVaoLop: "+err2.Error())
		oprot.WriteMessageBegin("addSinhVienVaoLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSinhVienVaoLop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddSinhVienSlicesVaoLop struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddSinhVienSlicesVaoLop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddSinhVienSlicesVaoLopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSinhVienSlicesVaoLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddSinhVienSlicesVaoLopResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddSinhVienSlicesVaoLop(ctx, args.Lsv, args.MaLHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSinhVienSlicesVaoLop: "+err2.Error())
		oprot.WriteMessageBegin("addSinhVienSlicesVaoLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSinhVienSlicesVaoLop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorExistsLopHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorExistsLopHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentExistsLopHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("existsLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentExistsLopHPResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExistsLopHP(ctx, args.MaLHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existsLopHP: "+err2.Error())
		oprot.WriteMessageBegin("existsLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("existsLopHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorExistsSinhVienTrongLop struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorExistsSinhVienTrongLop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentExistsSinhVienTrongLopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("existsSinhVienTrongLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentExistsSinhVienTrongLopResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExistsSinhVienTrongLop(ctx, args.MaLHP, args.MaSinhVien); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existsSinhVienTrongLop: "+err2.Error())
		oprot.WriteMessageBegin("existsSinhVienTrongLop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("existsSinhVienTrongLop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetLopHocPhan struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetLopHocPhan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetLopHocPhanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLopHocPhan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetLopHocPhanResult{}
	var retval *LopHocPhan
	var err2 error
	if retval, err2 = p.handler.GetLopHocPhan(ctx, args.Ma); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLopHocPhan: "+err2.Error())
		oprot.WriteMessageBegin("getLopHocPhan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLopHocPhan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetLopHocPhanSlice struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetLopHocPhanSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetLopHocPhanSliceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLopHocPhanSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetLopHocPhanSliceResult{}
	var retval LopHocPhanSlices
	var err2 error
	if retval, err2 = p.handler.GetLopHocPhanSlice(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLopHocPhanSlice: "+err2.Error())
		oprot.WriteMessageBegin("getLopHocPhanSlice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLopHocPhanSlice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetLopHocPhanOfSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetLopHocPhanOfSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetLopHocPhanOfSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLopHocPhanOfSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetLopHocPhanOfSinhVienResult{}
	var retval LopHocPhanSlices
	var err2 error
	if retval, err2 = p.handler.GetLopHocPhanOfSinhVien(ctx, args.Ma); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLopHocPhanOfSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("getLopHocPhanOfSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLopHocPhanOfSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetSinhVienLHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetSinhVienLHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetSinhVienLHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSinhVienLHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetSinhVienLHPResult{}
	var retval SinhVienSlices
	var err2 error
	if retval, err2 = p.handler.GetSinhVienLHP(ctx, args.MaLHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSinhVienLHP: "+err2.Error())
		oprot.WriteMessageBegin("getSinhVienLHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSinhVienLHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorDelLopHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorDelLopHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentDelLopHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentDelLopHPResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.DelLopHP(ctx, args.MaLHP); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delLopHP: "+err2.Error())
		oprot.WriteMessageBegin("delLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delLopHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorPutSVOutLopHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorPutSVOutLopHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentPutSVOutLopHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putSVOutLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentPutSVOutLopHPResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.PutSVOutLopHP(ctx, args.MaLHP, args.MaSV); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putSVOutLopHP: "+err2.Error())
		oprot.WriteMessageBegin("putSVOutLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("putSVOutLopHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddSinhVienResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddSinhVien(ctx, args.Sv); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("addSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorExistsSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorExistsSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentExistsSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("existsSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentExistsSinhVienResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExistsSinhVien(ctx, args.MaSV); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existsSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("existsSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("existsSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetSinhVienResult{}
	var retval *SinhVien
	var err2 error
	if retval, err2 = p.handler.GetSinhVien(ctx, args.MaSV); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("getSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorDelSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorDelSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentDelSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentDelSinhVienResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.DelSinhVien(ctx, args.MaSV); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("delSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("delSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorSearchSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorSearchSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentSearchSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("searchSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentSearchSinhVienResult{}
	var retval SinhVienSlices
	var err2 error
	if retval, err2 = p.handler.SearchSinhVien(ctx, args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("searchSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("searchSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorUpdateSinhVien struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorUpdateSinhVien) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentUpdateSinhVienArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentUpdateSinhVienResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSinhVien(ctx, args.Sv); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSinhVien: "+err2.Error())
		oprot.WriteMessageBegin("UpdateSinhVien", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSinhVien", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorUpdateLopHP struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorUpdateLopHP) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentUpdateLopHPArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentUpdateLopHPResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateLopHP(ctx, args.Lhp); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateLopHP: "+err2.Error())
		oprot.WriteMessageBegin("UpdateLopHP", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateLopHP", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ManagerStudentInitArgs struct {
}

func NewManagerStudentInitArgs() *ManagerStudentInitArgs {
	return &ManagerStudentInitArgs{}
}

func (p *ManagerStudentInitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentInitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("init_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentInitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentInitArgs(%+v)", *p)
}

type ManagerStudentInitResult struct {
}

func NewManagerStudentInitResult() *ManagerStudentInitResult {
	return &ManagerStudentInitResult{}
}

func (p *ManagerStudentInitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentInitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("init_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentInitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentInitResult(%+v)", *p)
}

// Attributes:
//  - LopHP
type ManagerStudentAddLopHPArgs struct {
	LopHP *LopHocPhan `thrift:"lopHP,1" db:"lopHP" json:"lopHP"`
}

func NewManagerStudentAddLopHPArgs() *ManagerStudentAddLopHPArgs {
	return &ManagerStudentAddLopHPArgs{}
}

var ManagerStudentAddLopHPArgs_LopHP_DEFAULT *LopHocPhan

func (p *ManagerStudentAddLopHPArgs) GetLopHP() *LopHocPhan {
	if !p.IsSetLopHP() {
		return ManagerStudentAddLopHPArgs_LopHP_DEFAULT
	}
	return p.LopHP
}
func (p *ManagerStudentAddLopHPArgs) IsSetLopHP() bool {
	return p.LopHP != nil
}

func (p *ManagerStudentAddLopHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddLopHPArgs) ReadField1(iprot thrift.TProtocol) error {
	p.LopHP = &LopHocPhan{}
	if err := p.LopHP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LopHP), err)
	}
	return nil
}

func (p *ManagerStudentAddLopHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addLopHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddLopHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lopHP", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lopHP: ", p), err)
	}
	if err := p.LopHP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LopHP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lopHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddLopHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddLopHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddLopHPResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddLopHPResult() *ManagerStudentAddLopHPResult {
	return &ManagerStudentAddLopHPResult{}
}

var ManagerStudentAddLopHPResult_Success_DEFAULT int32

func (p *ManagerStudentAddLopHPResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddLopHPResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddLopHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddLopHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddLopHPResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddLopHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addLopHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddLopHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddLopHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddLopHPResult(%+v)", *p)
}

// Attributes:
//  - Sv
//  - MaLHP
type ManagerStudentAddSinhVienVaoLopArgs struct {
	Sv    string `thrift:"sv,1" db:"sv" json:"sv"`
	MaLHP string `thrift:"maLHP,2" db:"maLHP" json:"maLHP"`
}

func NewManagerStudentAddSinhVienVaoLopArgs() *ManagerStudentAddSinhVienVaoLopArgs {
	return &ManagerStudentAddSinhVienVaoLopArgs{}
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) GetSv() string {
	return p.Sv
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) GetMaLHP() string {
	return p.MaLHP
}
func (p *ManagerStudentAddSinhVienVaoLopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sv = v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVienVaoLop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sv", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sv: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sv)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sv (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sv: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddSinhVienVaoLopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienVaoLopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddSinhVienVaoLopResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddSinhVienVaoLopResult() *ManagerStudentAddSinhVienVaoLopResult {
	return &ManagerStudentAddSinhVienVaoLopResult{}
}

var ManagerStudentAddSinhVienVaoLopResult_Success_DEFAULT int32

func (p *ManagerStudentAddSinhVienVaoLopResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddSinhVienVaoLopResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddSinhVienVaoLopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddSinhVienVaoLopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVienVaoLop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienVaoLopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddSinhVienVaoLopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienVaoLopResult(%+v)", *p)
}

// Attributes:
//  - Lsv
//  - MaLHP
type ManagerStudentAddSinhVienSlicesVaoLopArgs struct {
	Lsv   SinhVienSlices `thrift:"lsv,1" db:"lsv" json:"lsv"`
	MaLHP string         `thrift:"maLHP,2" db:"maLHP" json:"maLHP"`
}

func NewManagerStudentAddSinhVienSlicesVaoLopArgs() *ManagerStudentAddSinhVienSlicesVaoLopArgs {
	return &ManagerStudentAddSinhVienSlicesVaoLopArgs{}
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) GetLsv() SinhVienSlices {
	return p.Lsv
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) GetMaLHP() string {
	return p.MaLHP
}
func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(SinhVienSlices, 0, size)
	p.Lsv = tSlice
	for i := 0; i < size; i++ {
		_elem41 := &SinhVien{}
		if err := _elem41.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
		}
		p.Lsv = append(p.Lsv, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVienSlicesVaoLop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lsv", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lsv: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Lsv)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Lsv {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lsv: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienSlicesVaoLopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddSinhVienSlicesVaoLopResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddSinhVienSlicesVaoLopResult() *ManagerStudentAddSinhVienSlicesVaoLopResult {
	return &ManagerStudentAddSinhVienSlicesVaoLopResult{}
}

var ManagerStudentAddSinhVienSlicesVaoLopResult_Success_DEFAULT int32

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddSinhVienSlicesVaoLopResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVienSlicesVaoLop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddSinhVienSlicesVaoLopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienSlicesVaoLopResult(%+v)", *p)
}

// Attributes:
//  - MaLHP
type ManagerStudentExistsLopHPArgs struct {
	MaLHP string `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
}

func NewManagerStudentExistsLopHPArgs() *ManagerStudentExistsLopHPArgs {
	return &ManagerStudentExistsLopHPArgs{}
}

func (p *ManagerStudentExistsLopHPArgs) GetMaLHP() string {
	return p.MaLHP
}
func (p *ManagerStudentExistsLopHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsLopHPArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentExistsLopHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsLopHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsLopHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentExistsLopHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsLopHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentExistsLopHPResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentExistsLopHPResult() *ManagerStudentExistsLopHPResult {
	return &ManagerStudentExistsLopHPResult{}
}

var ManagerStudentExistsLopHPResult_Success_DEFAULT int32

func (p *ManagerStudentExistsLopHPResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentExistsLopHPResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentExistsLopHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentExistsLopHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsLopHPResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentExistsLopHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsLopHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsLopHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentExistsLopHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsLopHPResult(%+v)", *p)
}

// Attributes:
//  - MaLHP
//  - MaSinhVien
type ManagerStudentExistsSinhVienTrongLopArgs struct {
	MaLHP      string `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
	MaSinhVien string `thrift:"maSinhVien,2" db:"maSinhVien" json:"maSinhVien"`
}

func NewManagerStudentExistsSinhVienTrongLopArgs() *ManagerStudentExistsSinhVienTrongLopArgs {
	return &ManagerStudentExistsSinhVienTrongLopArgs{}
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) GetMaLHP() string {
	return p.MaLHP
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) GetMaSinhVien() string {
	return p.MaSinhVien
}
func (p *ManagerStudentExistsSinhVienTrongLopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaSinhVien = v
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsSinhVienTrongLop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maSinhVien", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maSinhVien: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaSinhVien)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maSinhVien (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maSinhVien: ", p), err)
	}
	return err
}

func (p *ManagerStudentExistsSinhVienTrongLopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsSinhVienTrongLopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentExistsSinhVienTrongLopResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentExistsSinhVienTrongLopResult() *ManagerStudentExistsSinhVienTrongLopResult {
	return &ManagerStudentExistsSinhVienTrongLopResult{}
}

var ManagerStudentExistsSinhVienTrongLopResult_Success_DEFAULT int32

func (p *ManagerStudentExistsSinhVienTrongLopResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentExistsSinhVienTrongLopResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentExistsSinhVienTrongLopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentExistsSinhVienTrongLopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsSinhVienTrongLop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienTrongLopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentExistsSinhVienTrongLopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsSinhVienTrongLopResult(%+v)", *p)
}

// Attributes:
//  - Ma
type ManagerStudentGetLopHocPhanArgs struct {
	Ma string `thrift:"ma,1" db:"ma" json:"ma"`
}

func NewManagerStudentGetLopHocPhanArgs() *ManagerStudentGetLopHocPhanArgs {
	return &ManagerStudentGetLopHocPhanArgs{}
}

func (p *ManagerStudentGetLopHocPhanArgs) GetMa() string {
	return p.Ma
}
func (p *ManagerStudentGetLopHocPhanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ma = v
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhan_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ma", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ma: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ma)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ma (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ma: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetLopHocPhanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetLopHocPhanResult struct {
	Success *LopHocPhan `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetLopHocPhanResult() *ManagerStudentGetLopHocPhanResult {
	return &ManagerStudentGetLopHocPhanResult{}
}

var ManagerStudentGetLopHocPhanResult_Success_DEFAULT *LopHocPhan

func (p *ManagerStudentGetLopHocPhanResult) GetSuccess() *LopHocPhan {
	if !p.IsSetSuccess() {
		return ManagerStudentGetLopHocPhanResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ManagerStudentGetLopHocPhanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetLopHocPhanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LopHocPhan{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhan_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetLopHocPhanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanResult(%+v)", *p)
}

type ManagerStudentGetLopHocPhanSliceArgs struct {
}

func NewManagerStudentGetLopHocPhanSliceArgs() *ManagerStudentGetLopHocPhanSliceArgs {
	return &ManagerStudentGetLopHocPhanSliceArgs{}
}

func (p *ManagerStudentGetLopHocPhanSliceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanSliceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhanSlice_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanSliceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetLopHocPhanSliceResult struct {
	Success LopHocPhanSlices `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetLopHocPhanSliceResult() *ManagerStudentGetLopHocPhanSliceResult {
	return &ManagerStudentGetLopHocPhanSliceResult{}
}

var ManagerStudentGetLopHocPhanSliceResult_Success_DEFAULT LopHocPhanSlices

func (p *ManagerStudentGetLopHocPhanSliceResult) GetSuccess() LopHocPhanSlices {
	return p.Success
}
func (p *ManagerStudentGetLopHocPhanSliceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetLopHocPhanSliceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanSliceResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(LopHocPhanSlices, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &LopHocPhan{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.Success = append(p.Success, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanSliceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhanSlice_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanSliceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetLopHocPhanSliceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanSliceResult(%+v)", *p)
}

// Attributes:
//  - Ma
type ManagerStudentGetLopHocPhanOfSinhVienArgs struct {
	Ma string `thrift:"ma,1" db:"ma" json:"ma"`
}

func NewManagerStudentGetLopHocPhanOfSinhVienArgs() *ManagerStudentGetLopHocPhanOfSinhVienArgs {
	return &ManagerStudentGetLopHocPhanOfSinhVienArgs{}
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) GetMa() string {
	return p.Ma
}
func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ma = v
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhanOfSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ma", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ma: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ma)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ma (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ma: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanOfSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetLopHocPhanOfSinhVienResult struct {
	Success LopHocPhanSlices `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetLopHocPhanOfSinhVienResult() *ManagerStudentGetLopHocPhanOfSinhVienResult {
	return &ManagerStudentGetLopHocPhanOfSinhVienResult{}
}

var ManagerStudentGetLopHocPhanOfSinhVienResult_Success_DEFAULT LopHocPhanSlices

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) GetSuccess() LopHocPhanSlices {
	return p.Success
}
func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(LopHocPhanSlices, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &LopHocPhan{}
		if err := _elem43.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.Success = append(p.Success, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLopHocPhanOfSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetLopHocPhanOfSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetLopHocPhanOfSinhVienResult(%+v)", *p)
}

// Attributes:
//  - MaLHP
type ManagerStudentGetSinhVienLHPArgs struct {
	MaLHP string `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
}

func NewManagerStudentGetSinhVienLHPArgs() *ManagerStudentGetSinhVienLHPArgs {
	return &ManagerStudentGetSinhVienLHPArgs{}
}

func (p *ManagerStudentGetSinhVienLHPArgs) GetMaLHP() string {
	return p.MaLHP
}
func (p *ManagerStudentGetSinhVienLHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSinhVienLHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetSinhVienLHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetSinhVienLHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetSinhVienLHPResult struct {
	Success SinhVienSlices `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetSinhVienLHPResult() *ManagerStudentGetSinhVienLHPResult {
	return &ManagerStudentGetSinhVienLHPResult{}
}

var ManagerStudentGetSinhVienLHPResult_Success_DEFAULT SinhVienSlices

func (p *ManagerStudentGetSinhVienLHPResult) GetSuccess() SinhVienSlices {
	return p.Success
}
func (p *ManagerStudentGetSinhVienLHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetSinhVienLHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(SinhVienSlices, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem44 := &SinhVien{}
		if err := _elem44.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
		}
		p.Success = append(p.Success, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSinhVienLHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienLHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetSinhVienLHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetSinhVienLHPResult(%+v)", *p)
}

// Attributes:
//  - MaLHP
type ManagerStudentDelLopHPArgs struct {
	MaLHP string `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
}

func NewManagerStudentDelLopHPArgs() *ManagerStudentDelLopHPArgs {
	return &ManagerStudentDelLopHPArgs{}
}

func (p *ManagerStudentDelLopHPArgs) GetMaLHP() string {
	return p.MaLHP
}
func (p *ManagerStudentDelLopHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentDelLopHPArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentDelLopHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delLopHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentDelLopHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentDelLopHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentDelLopHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentDelLopHPResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentDelLopHPResult() *ManagerStudentDelLopHPResult {
	return &ManagerStudentDelLopHPResult{}
}

var ManagerStudentDelLopHPResult_Success_DEFAULT int32

func (p *ManagerStudentDelLopHPResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentDelLopHPResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentDelLopHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentDelLopHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentDelLopHPResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentDelLopHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delLopHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentDelLopHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentDelLopHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentDelLopHPResult(%+v)", *p)
}

// Attributes:
//  - MaLHP
//  - MaSV
type ManagerStudentPutSVOutLopHPArgs struct {
	MaLHP string `thrift:"maLHP,1" db:"maLHP" json:"maLHP"`
	MaSV  string `thrift:"maSV,2" db:"maSV" json:"maSV"`
}

func NewManagerStudentPutSVOutLopHPArgs() *ManagerStudentPutSVOutLopHPArgs {
	return &ManagerStudentPutSVOutLopHPArgs{}
}

func (p *ManagerStudentPutSVOutLopHPArgs) GetMaLHP() string {
	return p.MaLHP
}

func (p *ManagerStudentPutSVOutLopHPArgs) GetMaSV() string {
	return p.MaSV
}
func (p *ManagerStudentPutSVOutLopHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaLHP = v
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaSV = v
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putSVOutLopHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maLHP", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maLHP: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaLHP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maLHP (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maLHP: ", p), err)
	}
	return err
}

func (p *ManagerStudentPutSVOutLopHPArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maSV", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maSV: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaSV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maSV (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maSV: ", p), err)
	}
	return err
}

func (p *ManagerStudentPutSVOutLopHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentPutSVOutLopHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentPutSVOutLopHPResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentPutSVOutLopHPResult() *ManagerStudentPutSVOutLopHPResult {
	return &ManagerStudentPutSVOutLopHPResult{}
}

var ManagerStudentPutSVOutLopHPResult_Success_DEFAULT int32

func (p *ManagerStudentPutSVOutLopHPResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentPutSVOutLopHPResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentPutSVOutLopHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentPutSVOutLopHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putSVOutLopHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentPutSVOutLopHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentPutSVOutLopHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentPutSVOutLopHPResult(%+v)", *p)
}

// Attributes:
//  - Sv
type ManagerStudentAddSinhVienArgs struct {
	Sv *SinhVien `thrift:"sv,1" db:"sv" json:"sv"`
}

func NewManagerStudentAddSinhVienArgs() *ManagerStudentAddSinhVienArgs {
	return &ManagerStudentAddSinhVienArgs{}
}

var ManagerStudentAddSinhVienArgs_Sv_DEFAULT *SinhVien

func (p *ManagerStudentAddSinhVienArgs) GetSv() *SinhVien {
	if !p.IsSetSv() {
		return ManagerStudentAddSinhVienArgs_Sv_DEFAULT
	}
	return p.Sv
}
func (p *ManagerStudentAddSinhVienArgs) IsSetSv() bool {
	return p.Sv != nil
}

func (p *ManagerStudentAddSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Sv = &SinhVien{}
	if err := p.Sv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sv), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sv: ", p), err)
	}
	if err := p.Sv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sv: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddSinhVienResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddSinhVienResult() *ManagerStudentAddSinhVienResult {
	return &ManagerStudentAddSinhVienResult{}
}

var ManagerStudentAddSinhVienResult_Success_DEFAULT int32

func (p *ManagerStudentAddSinhVienResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddSinhVienResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddSinhVienResult(%+v)", *p)
}

// Attributes:
//  - MaSV
type ManagerStudentExistsSinhVienArgs struct {
	MaSV string `thrift:"maSV,1" db:"maSV" json:"maSV"`
}

func NewManagerStudentExistsSinhVienArgs() *ManagerStudentExistsSinhVienArgs {
	return &ManagerStudentExistsSinhVienArgs{}
}

func (p *ManagerStudentExistsSinhVienArgs) GetMaSV() string {
	return p.MaSV
}
func (p *ManagerStudentExistsSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaSV = v
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maSV", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maSV: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaSV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maSV (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maSV: ", p), err)
	}
	return err
}

func (p *ManagerStudentExistsSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentExistsSinhVienResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentExistsSinhVienResult() *ManagerStudentExistsSinhVienResult {
	return &ManagerStudentExistsSinhVienResult{}
}

var ManagerStudentExistsSinhVienResult_Success_DEFAULT int32

func (p *ManagerStudentExistsSinhVienResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentExistsSinhVienResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentExistsSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentExistsSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("existsSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentExistsSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentExistsSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentExistsSinhVienResult(%+v)", *p)
}

// Attributes:
//  - MaSV
type ManagerStudentGetSinhVienArgs struct {
	MaSV string `thrift:"maSV,1" db:"maSV" json:"maSV"`
}

func NewManagerStudentGetSinhVienArgs() *ManagerStudentGetSinhVienArgs {
	return &ManagerStudentGetSinhVienArgs{}
}

func (p *ManagerStudentGetSinhVienArgs) GetMaSV() string {
	return p.MaSV
}
func (p *ManagerStudentGetSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaSV = v
	}
	return nil
}

func (p *ManagerStudentGetSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maSV", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maSV: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaSV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maSV (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maSV: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetSinhVienResult struct {
	Success *SinhVien `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetSinhVienResult() *ManagerStudentGetSinhVienResult {
	return &ManagerStudentGetSinhVienResult{}
}

var ManagerStudentGetSinhVienResult_Success_DEFAULT *SinhVien

func (p *ManagerStudentGetSinhVienResult) GetSuccess() *SinhVien {
	if !p.IsSetSuccess() {
		return ManagerStudentGetSinhVienResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ManagerStudentGetSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SinhVien{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetSinhVienResult(%+v)", *p)
}

// Attributes:
//  - MaSV
type ManagerStudentDelSinhVienArgs struct {
	MaSV string `thrift:"maSV,1" db:"maSV" json:"maSV"`
}

func NewManagerStudentDelSinhVienArgs() *ManagerStudentDelSinhVienArgs {
	return &ManagerStudentDelSinhVienArgs{}
}

func (p *ManagerStudentDelSinhVienArgs) GetMaSV() string {
	return p.MaSV
}
func (p *ManagerStudentDelSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentDelSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaSV = v
	}
	return nil
}

func (p *ManagerStudentDelSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentDelSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maSV", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maSV: ", p), err)
	}
	if err := oprot.WriteString(string(p.MaSV)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maSV (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maSV: ", p), err)
	}
	return err
}

func (p *ManagerStudentDelSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentDelSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentDelSinhVienResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentDelSinhVienResult() *ManagerStudentDelSinhVienResult {
	return &ManagerStudentDelSinhVienResult{}
}

var ManagerStudentDelSinhVienResult_Success_DEFAULT int32

func (p *ManagerStudentDelSinhVienResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentDelSinhVienResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentDelSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentDelSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentDelSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentDelSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentDelSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentDelSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentDelSinhVienResult(%+v)", *p)
}

// Attributes:
//  - Key
type ManagerStudentSearchSinhVienArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewManagerStudentSearchSinhVienArgs() *ManagerStudentSearchSinhVienArgs {
	return &ManagerStudentSearchSinhVienArgs{}
}

func (p *ManagerStudentSearchSinhVienArgs) GetKey() string {
	return p.Key
}
func (p *ManagerStudentSearchSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("searchSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *ManagerStudentSearchSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentSearchSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentSearchSinhVienResult struct {
	Success SinhVienSlices `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentSearchSinhVienResult() *ManagerStudentSearchSinhVienResult {
	return &ManagerStudentSearchSinhVienResult{}
}

var ManagerStudentSearchSinhVienResult_Success_DEFAULT SinhVienSlices

func (p *ManagerStudentSearchSinhVienResult) GetSuccess() SinhVienSlices {
	return p.Success
}
func (p *ManagerStudentSearchSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentSearchSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(SinhVienSlices, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem45 := &SinhVien{}
		if err := _elem45.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
		}
		p.Success = append(p.Success, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("searchSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentSearchSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentSearchSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentSearchSinhVienResult(%+v)", *p)
}

// Attributes:
//  - Sv
type ManagerStudentUpdateSinhVienArgs struct {
	Sv *SinhVien `thrift:"sv,1" db:"sv" json:"sv"`
}

func NewManagerStudentUpdateSinhVienArgs() *ManagerStudentUpdateSinhVienArgs {
	return &ManagerStudentUpdateSinhVienArgs{}
}

var ManagerStudentUpdateSinhVienArgs_Sv_DEFAULT *SinhVien

func (p *ManagerStudentUpdateSinhVienArgs) GetSv() *SinhVien {
	if !p.IsSetSv() {
		return ManagerStudentUpdateSinhVienArgs_Sv_DEFAULT
	}
	return p.Sv
}
func (p *ManagerStudentUpdateSinhVienArgs) IsSetSv() bool {
	return p.Sv != nil
}

func (p *ManagerStudentUpdateSinhVienArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Sv = &SinhVien{}
	if err := p.Sv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sv), err)
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateSinhVien_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sv: ", p), err)
	}
	if err := p.Sv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sv: ", p), err)
	}
	return err
}

func (p *ManagerStudentUpdateSinhVienArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateSinhVienArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentUpdateSinhVienResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentUpdateSinhVienResult() *ManagerStudentUpdateSinhVienResult {
	return &ManagerStudentUpdateSinhVienResult{}
}

var ManagerStudentUpdateSinhVienResult_Success_DEFAULT int32

func (p *ManagerStudentUpdateSinhVienResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentUpdateSinhVienResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentUpdateSinhVienResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentUpdateSinhVienResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateSinhVien_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateSinhVienResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentUpdateSinhVienResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateSinhVienResult(%+v)", *p)
}

// Attributes:
//  - Lhp
type ManagerStudentUpdateLopHPArgs struct {
	Lhp *LopHocPhan `thrift:"lhp,1" db:"lhp" json:"lhp"`
}

func NewManagerStudentUpdateLopHPArgs() *ManagerStudentUpdateLopHPArgs {
	return &ManagerStudentUpdateLopHPArgs{}
}

var ManagerStudentUpdateLopHPArgs_Lhp_DEFAULT *LopHocPhan

func (p *ManagerStudentUpdateLopHPArgs) GetLhp() *LopHocPhan {
	if !p.IsSetLhp() {
		return ManagerStudentUpdateLopHPArgs_Lhp_DEFAULT
	}
	return p.Lhp
}
func (p *ManagerStudentUpdateLopHPArgs) IsSetLhp() bool {
	return p.Lhp != nil
}

func (p *ManagerStudentUpdateLopHPArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Lhp = &LopHocPhan{}
	if err := p.Lhp.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Lhp), err)
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateLopHP_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lhp", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lhp: ", p), err)
	}
	if err := p.Lhp.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Lhp), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lhp: ", p), err)
	}
	return err
}

func (p *ManagerStudentUpdateLopHPArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateLopHPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentUpdateLopHPResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentUpdateLopHPResult() *ManagerStudentUpdateLopHPResult {
	return &ManagerStudentUpdateLopHPResult{}
}

var ManagerStudentUpdateLopHPResult_Success_DEFAULT int32

func (p *ManagerStudentUpdateLopHPResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentUpdateLopHPResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentUpdateLopHPResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentUpdateLopHPResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateLopHP_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateLopHPResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentUpdateLopHPResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateLopHPResult(%+v)", *p)
}
