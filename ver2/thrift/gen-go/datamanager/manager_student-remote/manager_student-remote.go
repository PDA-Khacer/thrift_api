// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"datamanager"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = datamanager.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  i32 addStudent(Student sv)")
	fmt.Fprintln(os.Stderr, "  i32 addClass(ClassC sv)")
	fmt.Fprintln(os.Stderr, "  Student getStudent(string id)")
	fmt.Fprintln(os.Stderr, "  ClassC getClass(string Id)")
	fmt.Fprintln(os.Stderr, "  StudentSlice getAllStudent()")
	fmt.Fprintln(os.Stderr, "  ClassCSlice getAllClass()")
	fmt.Fprintln(os.Stderr, "  StudentInforSlice getAllStudentInClass(string id)")
	fmt.Fprintln(os.Stderr, "  ClassInforSlices getAllClassOfStudent(string id)")
	fmt.Fprintln(os.Stderr, "  i32 isExistStudent(string id)")
	fmt.Fprintln(os.Stderr, "  i32 isExistClass(string id)")
	fmt.Fprintln(os.Stderr, "  i32 isExistStudentInClass(string idS, string idC)")
	fmt.Fprintln(os.Stderr, "  i32 updateStudent(StudentInfor infor)")
	fmt.Fprintln(os.Stderr, "  i32 updateClass(ClassInfor infor)")
	fmt.Fprintln(os.Stderr, "  i32 addStudentToClass(string idS, string idC)")
	fmt.Fprintln(os.Stderr, "  i32 removeStudentInClass(string idS, string idC)")
	fmt.Fprintln(os.Stderr, "  i32 removeStudent(string id)")
	fmt.Fprintln(os.Stderr, "  i32 removeClass(string id)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := datamanager.NewManagerStudentClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "addStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddStudent requires 1 args")
			flag.Usage()
		}
		arg42 := flag.Arg(1)
		mbTrans43 := thrift.NewTMemoryBufferLen(len(arg42))
		defer mbTrans43.Close()
		_, err44 := mbTrans43.WriteString(arg42)
		if err44 != nil {
			Usage()
			return
		}
		factory45 := thrift.NewTJSONProtocolFactory()
		jsProt46 := factory45.GetProtocol(mbTrans43)
		argvalue0 := datamanager.NewStudent()
		err47 := argvalue0.Read(jsProt46)
		if err47 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "addClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddClass requires 1 args")
			flag.Usage()
		}
		arg48 := flag.Arg(1)
		mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
		defer mbTrans49.Close()
		_, err50 := mbTrans49.WriteString(arg48)
		if err50 != nil {
			Usage()
			return
		}
		factory51 := thrift.NewTJSONProtocolFactory()
		jsProt52 := factory51.GetProtocol(mbTrans49)
		argvalue0 := datamanager.NewClassC()
		err53 := argvalue0.Read(jsProt52)
		if err53 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetStudent requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetClass requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getAllStudent":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllStudent requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllStudent(context.Background()))
		fmt.Print("\n")
		break
	case "getAllClass":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllClass requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllClass(context.Background()))
		fmt.Print("\n")
		break
	case "getAllStudentInClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllStudentInClass requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllStudentInClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getAllClassOfStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllClassOfStudent requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllClassOfStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isExistStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsExistStudent requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsExistStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isExistClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsExistClass requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsExistClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isExistStudentInClass":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "IsExistStudentInClass requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.IsExistStudentInClass(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "updateStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateStudent requires 1 args")
			flag.Usage()
		}
		arg62 := flag.Arg(1)
		mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
		defer mbTrans63.Close()
		_, err64 := mbTrans63.WriteString(arg62)
		if err64 != nil {
			Usage()
			return
		}
		factory65 := thrift.NewTJSONProtocolFactory()
		jsProt66 := factory65.GetProtocol(mbTrans63)
		argvalue0 := datamanager.NewStudentInfor()
		err67 := argvalue0.Read(jsProt66)
		if err67 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateClass requires 1 args")
			flag.Usage()
		}
		arg68 := flag.Arg(1)
		mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
		defer mbTrans69.Close()
		_, err70 := mbTrans69.WriteString(arg68)
		if err70 != nil {
			Usage()
			return
		}
		factory71 := thrift.NewTJSONProtocolFactory()
		jsProt72 := factory71.GetProtocol(mbTrans69)
		argvalue0 := datamanager.NewClassInfor()
		err73 := argvalue0.Read(jsProt72)
		if err73 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "addStudentToClass":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddStudentToClass requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddStudentToClass(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "removeStudentInClass":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveStudentInClass requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RemoveStudentInClass(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "removeStudent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveStudent requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveStudent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "removeClass":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveClass requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveClass(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
