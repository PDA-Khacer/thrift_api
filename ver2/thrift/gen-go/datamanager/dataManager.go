// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package datamanager

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type StudentSlice []*Student

func StudentSlicePtr(v StudentSlice) *StudentSlice { return &v }

type ClassCSlice []*ClassC

func ClassCSlicePtr(v ClassCSlice) *ClassCSlice { return &v }

type StudentInforSlice []*StudentInfor

func StudentInforSlicePtr(v StudentInforSlice) *StudentInforSlice { return &v }

type ClassInforSlices []*ClassInfor

func ClassInforSlicesPtr(v ClassInforSlices) *ClassInforSlices { return &v }

// Attributes:
//  - ID
//  - Name
//  - Gender
//  - Brith
//  - Phone
type StudentInfor struct {
	ID     string `thrift:"id,1" db:"id" json:"id"`
	Name   string `thrift:"name,2" db:"name" json:"name"`
	Gender int32  `thrift:"gender,3" db:"gender" json:"gender"`
	Brith  string `thrift:"brith,4" db:"brith" json:"brith"`
	Phone  string `thrift:"phone,5" db:"phone" json:"phone"`
}

func NewStudentInfor() *StudentInfor {
	return &StudentInfor{}
}

func (p *StudentInfor) GetID() string {
	return p.ID
}

func (p *StudentInfor) GetName() string {
	return p.Name
}

func (p *StudentInfor) GetGender() int32 {
	return p.Gender
}

func (p *StudentInfor) GetBrith() string {
	return p.Brith
}

func (p *StudentInfor) GetPhone() string {
	return p.Phone
}
func (p *StudentInfor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StudentInfor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *StudentInfor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *StudentInfor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Gender = v
	}
	return nil
}

func (p *StudentInfor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Brith = v
	}
	return nil
}

func (p *StudentInfor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *StudentInfor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StudentInfor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StudentInfor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *StudentInfor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *StudentInfor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gender: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gender (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gender: ", p), err)
	}
	return err
}

func (p *StudentInfor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("brith", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brith: ", p), err)
	}
	if err := oprot.WriteString(string(p.Brith)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.brith (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brith: ", p), err)
	}
	return err
}

func (p *StudentInfor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err)
	}
	return err
}

func (p *StudentInfor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StudentInfor(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Teacher
type ClassInfor struct {
	ID      string `thrift:"id,1" db:"id" json:"id"`
	Name    string `thrift:"name,2" db:"name" json:"name"`
	Teacher string `thrift:"teacher,3" db:"teacher" json:"teacher"`
}

func NewClassInfor() *ClassInfor {
	return &ClassInfor{}
}

func (p *ClassInfor) GetID() string {
	return p.ID
}

func (p *ClassInfor) GetName() string {
	return p.Name
}

func (p *ClassInfor) GetTeacher() string {
	return p.Teacher
}
func (p *ClassInfor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClassInfor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ClassInfor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ClassInfor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Teacher = v
	}
	return nil
}

func (p *ClassInfor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClassInfor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClassInfor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ClassInfor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *ClassInfor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("teacher", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:teacher: ", p), err)
	}
	if err := oprot.WriteString(string(p.Teacher)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.teacher (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:teacher: ", p), err)
	}
	return err
}

func (p *ClassInfor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassInfor(%+v)", *p)
}

// Attributes:
//  - Infor
//  - AllClass
type Student struct {
	Infor    *StudentInfor `thrift:"infor,1" db:"infor" json:"infor"`
	AllClass []string      `thrift:"allClass,2" db:"allClass" json:"allClass"`
}

func NewStudent() *Student {
	return &Student{}
}

var Student_Infor_DEFAULT *StudentInfor

func (p *Student) GetInfor() *StudentInfor {
	if !p.IsSetInfor() {
		return Student_Infor_DEFAULT
	}
	return p.Infor
}

func (p *Student) GetAllClass() []string {
	return p.AllClass
}
func (p *Student) IsSetInfor() bool {
	return p.Infor != nil
}

func (p *Student) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Student) ReadField1(iprot thrift.TProtocol) error {
	p.Infor = &StudentInfor{}
	if err := p.Infor.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Infor), err)
	}
	return nil
}

func (p *Student) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AllClass = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.AllClass = append(p.AllClass, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Student) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Student"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Student) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infor", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infor: ", p), err)
	}
	if err := p.Infor.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Infor), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infor: ", p), err)
	}
	return err
}

func (p *Student) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allClass", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:allClass: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AllClass)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AllClass {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:allClass: ", p), err)
	}
	return err
}

func (p *Student) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Student(%+v)", *p)
}

// Attributes:
//  - Infor
//  - AllStudent
type ClassC struct {
	Infor      *ClassInfor `thrift:"infor,1" db:"infor" json:"infor"`
	AllStudent []string    `thrift:"allStudent,2" db:"allStudent" json:"allStudent"`
}

func NewClassC() *ClassC {
	return &ClassC{}
}

var ClassC_Infor_DEFAULT *ClassInfor

func (p *ClassC) GetInfor() *ClassInfor {
	if !p.IsSetInfor() {
		return ClassC_Infor_DEFAULT
	}
	return p.Infor
}

func (p *ClassC) GetAllStudent() []string {
	return p.AllStudent
}
func (p *ClassC) IsSetInfor() bool {
	return p.Infor != nil
}

func (p *ClassC) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClassC) ReadField1(iprot thrift.TProtocol) error {
	p.Infor = &ClassInfor{}
	if err := p.Infor.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Infor), err)
	}
	return nil
}

func (p *ClassC) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AllStudent = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.AllStudent = append(p.AllStudent, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClassC) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClassC"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClassC) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infor", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infor: ", p), err)
	}
	if err := p.Infor.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Infor), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infor: ", p), err)
	}
	return err
}

func (p *ClassC) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("allStudent", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:allStudent: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AllStudent)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AllStudent {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:allStudent: ", p), err)
	}
	return err
}

func (p *ClassC) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClassC(%+v)", *p)
}

type ManagerStudent interface {
	// Parameters:
	//  - Sv
	AddStudent(ctx context.Context, sv *Student) (r int32, err error)
	// Parameters:
	//  - Sv
	AddClass(ctx context.Context, sv *ClassC) (r int32, err error)
	// Parameters:
	//  - ID
	GetStudent(ctx context.Context, id string) (r *Student, err error)
	// Parameters:
	//  - ID
	GetClass(ctx context.Context, Id string) (r *ClassC, err error)
	GetAllStudent(ctx context.Context) (r StudentSlice, err error)
	GetAllClass(ctx context.Context) (r ClassCSlice, err error)
	// Parameters:
	//  - ID
	GetAllStudentInClass(ctx context.Context, id string) (r StudentInforSlice, err error)
	// Parameters:
	//  - ID
	GetAllClassOfStudent(ctx context.Context, id string) (r ClassInforSlices, err error)
	// Parameters:
	//  - ID
	IsExistStudent(ctx context.Context, id string) (r int32, err error)
	// Parameters:
	//  - ID
	IsExistClass(ctx context.Context, id string) (r int32, err error)
	// Parameters:
	//  - IdS
	//  - IdC
	IsExistStudentInClass(ctx context.Context, idS string, idC string) (r int32, err error)
	// Parameters:
	//  - Infor
	UpdateStudent(ctx context.Context, infor *StudentInfor) (r int32, err error)
	// Parameters:
	//  - Infor
	UpdateClass(ctx context.Context, infor *ClassInfor) (r int32, err error)
	// Parameters:
	//  - IdS
	//  - IdC
	AddStudentToClass(ctx context.Context, idS string, idC string) (r int32, err error)
	// Parameters:
	//  - IdS
	//  - IdC
	RemoveStudentInClass(ctx context.Context, idS string, idC string) (r int32, err error)
	// Parameters:
	//  - ID
	RemoveStudent(ctx context.Context, id string) (r int32, err error)
	// Parameters:
	//  - ID
	RemoveClass(ctx context.Context, id string) (r int32, err error)
}

type ManagerStudentClient struct {
	c thrift.TClient
}

func NewManagerStudentClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewManagerStudentClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewManagerStudentClient(c thrift.TClient) *ManagerStudentClient {
	return &ManagerStudentClient{
		c: c,
	}
}

func (p *ManagerStudentClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Sv
func (p *ManagerStudentClient) AddStudent(ctx context.Context, sv *Student) (r int32, err error) {
	var _args2 ManagerStudentAddStudentArgs
	_args2.Sv = sv
	var _result3 ManagerStudentAddStudentResult
	if err = p.Client_().Call(ctx, "addStudent", &_args2, &_result3); err != nil {
		return
	}
	return _result3.GetSuccess(), nil
}

// Parameters:
//  - Sv
func (p *ManagerStudentClient) AddClass(ctx context.Context, sv *ClassC) (r int32, err error) {
	var _args4 ManagerStudentAddClassArgs
	_args4.Sv = sv
	var _result5 ManagerStudentAddClassResult
	if err = p.Client_().Call(ctx, "addClass", &_args4, &_result5); err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) GetStudent(ctx context.Context, id string) (r *Student, err error) {
	var _args6 ManagerStudentGetStudentArgs
	_args6.ID = id
	var _result7 ManagerStudentGetStudentResult
	if err = p.Client_().Call(ctx, "getStudent", &_args6, &_result7); err != nil {
		return
	}
	return _result7.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) GetClass(ctx context.Context, Id string) (r *ClassC, err error) {
	var _args8 ManagerStudentGetClassArgs
	_args8.ID = Id
	var _result9 ManagerStudentGetClassResult
	if err = p.Client_().Call(ctx, "getClass", &_args8, &_result9); err != nil {
		return
	}
	return _result9.GetSuccess(), nil
}

func (p *ManagerStudentClient) GetAllStudent(ctx context.Context) (r StudentSlice, err error) {
	var _args10 ManagerStudentGetAllStudentArgs
	var _result11 ManagerStudentGetAllStudentResult
	if err = p.Client_().Call(ctx, "getAllStudent", &_args10, &_result11); err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

func (p *ManagerStudentClient) GetAllClass(ctx context.Context) (r ClassCSlice, err error) {
	var _args12 ManagerStudentGetAllClassArgs
	var _result13 ManagerStudentGetAllClassResult
	if err = p.Client_().Call(ctx, "getAllClass", &_args12, &_result13); err != nil {
		return
	}
	return _result13.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) GetAllStudentInClass(ctx context.Context, id string) (r StudentInforSlice, err error) {
	var _args14 ManagerStudentGetAllStudentInClassArgs
	_args14.ID = id
	var _result15 ManagerStudentGetAllStudentInClassResult
	if err = p.Client_().Call(ctx, "getAllStudentInClass", &_args14, &_result15); err != nil {
		return
	}
	return _result15.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) GetAllClassOfStudent(ctx context.Context, id string) (r ClassInforSlices, err error) {
	var _args16 ManagerStudentGetAllClassOfStudentArgs
	_args16.ID = id
	var _result17 ManagerStudentGetAllClassOfStudentResult
	if err = p.Client_().Call(ctx, "getAllClassOfStudent", &_args16, &_result17); err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) IsExistStudent(ctx context.Context, id string) (r int32, err error) {
	var _args18 ManagerStudentIsExistStudentArgs
	_args18.ID = id
	var _result19 ManagerStudentIsExistStudentResult
	if err = p.Client_().Call(ctx, "isExistStudent", &_args18, &_result19); err != nil {
		return
	}
	return _result19.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) IsExistClass(ctx context.Context, id string) (r int32, err error) {
	var _args20 ManagerStudentIsExistClassArgs
	_args20.ID = id
	var _result21 ManagerStudentIsExistClassResult
	if err = p.Client_().Call(ctx, "isExistClass", &_args20, &_result21); err != nil {
		return
	}
	return _result21.GetSuccess(), nil
}

// Parameters:
//  - IdS
//  - IdC
func (p *ManagerStudentClient) IsExistStudentInClass(ctx context.Context, idS string, idC string) (r int32, err error) {
	var _args22 ManagerStudentIsExistStudentInClassArgs
	_args22.IdS = idS
	_args22.IdC = idC
	var _result23 ManagerStudentIsExistStudentInClassResult
	if err = p.Client_().Call(ctx, "isExistStudentInClass", &_args22, &_result23); err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Parameters:
//  - Infor
func (p *ManagerStudentClient) UpdateStudent(ctx context.Context, infor *StudentInfor) (r int32, err error) {
	var _args24 ManagerStudentUpdateStudentArgs
	_args24.Infor = infor
	var _result25 ManagerStudentUpdateStudentResult
	if err = p.Client_().Call(ctx, "updateStudent", &_args24, &_result25); err != nil {
		return
	}
	return _result25.GetSuccess(), nil
}

// Parameters:
//  - Infor
func (p *ManagerStudentClient) UpdateClass(ctx context.Context, infor *ClassInfor) (r int32, err error) {
	var _args26 ManagerStudentUpdateClassArgs
	_args26.Infor = infor
	var _result27 ManagerStudentUpdateClassResult
	if err = p.Client_().Call(ctx, "updateClass", &_args26, &_result27); err != nil {
		return
	}
	return _result27.GetSuccess(), nil
}

// Parameters:
//  - IdS
//  - IdC
func (p *ManagerStudentClient) AddStudentToClass(ctx context.Context, idS string, idC string) (r int32, err error) {
	var _args28 ManagerStudentAddStudentToClassArgs
	_args28.IdS = idS
	_args28.IdC = idC
	var _result29 ManagerStudentAddStudentToClassResult
	if err = p.Client_().Call(ctx, "addStudentToClass", &_args28, &_result29); err != nil {
		return
	}
	return _result29.GetSuccess(), nil
}

// Parameters:
//  - IdS
//  - IdC
func (p *ManagerStudentClient) RemoveStudentInClass(ctx context.Context, idS string, idC string) (r int32, err error) {
	var _args30 ManagerStudentRemoveStudentInClassArgs
	_args30.IdS = idS
	_args30.IdC = idC
	var _result31 ManagerStudentRemoveStudentInClassResult
	if err = p.Client_().Call(ctx, "removeStudentInClass", &_args30, &_result31); err != nil {
		return
	}
	return _result31.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) RemoveStudent(ctx context.Context, id string) (r int32, err error) {
	var _args32 ManagerStudentRemoveStudentArgs
	_args32.ID = id
	var _result33 ManagerStudentRemoveStudentResult
	if err = p.Client_().Call(ctx, "removeStudent", &_args32, &_result33); err != nil {
		return
	}
	return _result33.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *ManagerStudentClient) RemoveClass(ctx context.Context, id string) (r int32, err error) {
	var _args34 ManagerStudentRemoveClassArgs
	_args34.ID = id
	var _result35 ManagerStudentRemoveClassResult
	if err = p.Client_().Call(ctx, "removeClass", &_args34, &_result35); err != nil {
		return
	}
	return _result35.GetSuccess(), nil
}

type ManagerStudentProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ManagerStudent
}

func (p *ManagerStudentProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ManagerStudentProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ManagerStudentProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewManagerStudentProcessor(handler ManagerStudent) *ManagerStudentProcessor {

	self36 := &ManagerStudentProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self36.processorMap["addStudent"] = &managerStudentProcessorAddStudent{handler: handler}
	self36.processorMap["addClass"] = &managerStudentProcessorAddClass{handler: handler}
	self36.processorMap["getStudent"] = &managerStudentProcessorGetStudent{handler: handler}
	self36.processorMap["getClass"] = &managerStudentProcessorGetClass{handler: handler}
	self36.processorMap["getAllStudent"] = &managerStudentProcessorGetAllStudent{handler: handler}
	self36.processorMap["getAllClass"] = &managerStudentProcessorGetAllClass{handler: handler}
	self36.processorMap["getAllStudentInClass"] = &managerStudentProcessorGetAllStudentInClass{handler: handler}
	self36.processorMap["getAllClassOfStudent"] = &managerStudentProcessorGetAllClassOfStudent{handler: handler}
	self36.processorMap["isExistStudent"] = &managerStudentProcessorIsExistStudent{handler: handler}
	self36.processorMap["isExistClass"] = &managerStudentProcessorIsExistClass{handler: handler}
	self36.processorMap["isExistStudentInClass"] = &managerStudentProcessorIsExistStudentInClass{handler: handler}
	self36.processorMap["updateStudent"] = &managerStudentProcessorUpdateStudent{handler: handler}
	self36.processorMap["updateClass"] = &managerStudentProcessorUpdateClass{handler: handler}
	self36.processorMap["addStudentToClass"] = &managerStudentProcessorAddStudentToClass{handler: handler}
	self36.processorMap["removeStudentInClass"] = &managerStudentProcessorRemoveStudentInClass{handler: handler}
	self36.processorMap["removeStudent"] = &managerStudentProcessorRemoveStudent{handler: handler}
	self36.processorMap["removeClass"] = &managerStudentProcessorRemoveClass{handler: handler}
	return self36
}

func (p *ManagerStudentProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x37 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x37.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x37

}

type managerStudentProcessorAddStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddStudentResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddStudent(ctx, args.Sv); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addStudent: "+err2.Error())
		oprot.WriteMessageBegin("addStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddClass(ctx, args.Sv); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addClass: "+err2.Error())
		oprot.WriteMessageBegin("addClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetStudentResult{}
	var retval *Student
	var err2 error
	if retval, err2 = p.handler.GetStudent(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStudent: "+err2.Error())
		oprot.WriteMessageBegin("getStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetClassResult{}
	var retval *ClassC
	var err2 error
	if retval, err2 = p.handler.GetClass(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClass: "+err2.Error())
		oprot.WriteMessageBegin("getClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetAllStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetAllStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetAllStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetAllStudentResult{}
	var retval StudentSlice
	var err2 error
	if retval, err2 = p.handler.GetAllStudent(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllStudent: "+err2.Error())
		oprot.WriteMessageBegin("getAllStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetAllClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetAllClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetAllClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetAllClassResult{}
	var retval ClassCSlice
	var err2 error
	if retval, err2 = p.handler.GetAllClass(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllClass: "+err2.Error())
		oprot.WriteMessageBegin("getAllClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetAllStudentInClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetAllStudentInClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetAllStudentInClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetAllStudentInClassResult{}
	var retval StudentInforSlice
	var err2 error
	if retval, err2 = p.handler.GetAllStudentInClass(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllStudentInClass: "+err2.Error())
		oprot.WriteMessageBegin("getAllStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllStudentInClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorGetAllClassOfStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorGetAllClassOfStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentGetAllClassOfStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllClassOfStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentGetAllClassOfStudentResult{}
	var retval ClassInforSlices
	var err2 error
	if retval, err2 = p.handler.GetAllClassOfStudent(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllClassOfStudent: "+err2.Error())
		oprot.WriteMessageBegin("getAllClassOfStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllClassOfStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorIsExistStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorIsExistStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentIsExistStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isExistStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentIsExistStudentResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.IsExistStudent(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isExistStudent: "+err2.Error())
		oprot.WriteMessageBegin("isExistStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isExistStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorIsExistClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorIsExistClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentIsExistClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isExistClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentIsExistClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.IsExistClass(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isExistClass: "+err2.Error())
		oprot.WriteMessageBegin("isExistClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isExistClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorIsExistStudentInClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorIsExistStudentInClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentIsExistStudentInClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isExistStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentIsExistStudentInClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.IsExistStudentInClass(ctx, args.IdS, args.IdC); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isExistStudentInClass: "+err2.Error())
		oprot.WriteMessageBegin("isExistStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isExistStudentInClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorUpdateStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorUpdateStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentUpdateStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentUpdateStudentResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateStudent(ctx, args.Infor); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStudent: "+err2.Error())
		oprot.WriteMessageBegin("updateStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorUpdateClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorUpdateClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentUpdateClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentUpdateClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateClass(ctx, args.Infor); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateClass: "+err2.Error())
		oprot.WriteMessageBegin("updateClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorAddStudentToClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorAddStudentToClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentAddStudentToClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addStudentToClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentAddStudentToClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddStudentToClass(ctx, args.IdS, args.IdC); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addStudentToClass: "+err2.Error())
		oprot.WriteMessageBegin("addStudentToClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addStudentToClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorRemoveStudentInClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorRemoveStudentInClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentRemoveStudentInClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentRemoveStudentInClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.RemoveStudentInClass(ctx, args.IdS, args.IdC); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeStudentInClass: "+err2.Error())
		oprot.WriteMessageBegin("removeStudentInClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeStudentInClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorRemoveStudent struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorRemoveStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentRemoveStudentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentRemoveStudentResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.RemoveStudent(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeStudent: "+err2.Error())
		oprot.WriteMessageBegin("removeStudent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeStudent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type managerStudentProcessorRemoveClass struct {
	handler ManagerStudent
}

func (p *managerStudentProcessorRemoveClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ManagerStudentRemoveClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ManagerStudentRemoveClassResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.RemoveClass(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeClass: "+err2.Error())
		oprot.WriteMessageBegin("removeClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Sv
type ManagerStudentAddStudentArgs struct {
	Sv *Student `thrift:"sv,1" db:"sv" json:"sv"`
}

func NewManagerStudentAddStudentArgs() *ManagerStudentAddStudentArgs {
	return &ManagerStudentAddStudentArgs{}
}

var ManagerStudentAddStudentArgs_Sv_DEFAULT *Student

func (p *ManagerStudentAddStudentArgs) GetSv() *Student {
	if !p.IsSetSv() {
		return ManagerStudentAddStudentArgs_Sv_DEFAULT
	}
	return p.Sv
}
func (p *ManagerStudentAddStudentArgs) IsSetSv() bool {
	return p.Sv != nil
}

func (p *ManagerStudentAddStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Sv = &Student{}
	if err := p.Sv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sv), err)
	}
	return nil
}

func (p *ManagerStudentAddStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sv: ", p), err)
	}
	if err := p.Sv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sv: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddStudentResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddStudentResult() *ManagerStudentAddStudentResult {
	return &ManagerStudentAddStudentResult{}
}

var ManagerStudentAddStudentResult_Success_DEFAULT int32

func (p *ManagerStudentAddStudentResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddStudentResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddStudentResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddStudentResult(%+v)", *p)
}

// Attributes:
//  - Sv
type ManagerStudentAddClassArgs struct {
	Sv *ClassC `thrift:"sv,1" db:"sv" json:"sv"`
}

func NewManagerStudentAddClassArgs() *ManagerStudentAddClassArgs {
	return &ManagerStudentAddClassArgs{}
}

var ManagerStudentAddClassArgs_Sv_DEFAULT *ClassC

func (p *ManagerStudentAddClassArgs) GetSv() *ClassC {
	if !p.IsSetSv() {
		return ManagerStudentAddClassArgs_Sv_DEFAULT
	}
	return p.Sv
}
func (p *ManagerStudentAddClassArgs) IsSetSv() bool {
	return p.Sv != nil
}

func (p *ManagerStudentAddClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Sv = &ClassC{}
	if err := p.Sv.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sv), err)
	}
	return nil
}

func (p *ManagerStudentAddClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sv", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sv: ", p), err)
	}
	if err := p.Sv.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sv), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sv: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddClassResult() *ManagerStudentAddClassResult {
	return &ManagerStudentAddClassResult{}
}

var ManagerStudentAddClassResult_Success_DEFAULT int32

func (p *ManagerStudentAddClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddClassResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentGetStudentArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentGetStudentArgs() *ManagerStudentGetStudentArgs {
	return &ManagerStudentGetStudentArgs{}
}

func (p *ManagerStudentGetStudentArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentGetStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentGetStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetStudentResult struct {
	Success *Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetStudentResult() *ManagerStudentGetStudentResult {
	return &ManagerStudentGetStudentResult{}
}

var ManagerStudentGetStudentResult_Success_DEFAULT *Student

func (p *ManagerStudentGetStudentResult) GetSuccess() *Student {
	if !p.IsSetSuccess() {
		return ManagerStudentGetStudentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ManagerStudentGetStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetStudentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Student{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ManagerStudentGetStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetStudentResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentGetClassArgs struct {
	ID string `thrift:"Id,1" db:"Id" json:"Id"`
}

func NewManagerStudentGetClassArgs() *ManagerStudentGetClassArgs {
	return &ManagerStudentGetClassArgs{}
}

func (p *ManagerStudentGetClassArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentGetClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentGetClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetClassResult struct {
	Success *ClassC `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetClassResult() *ManagerStudentGetClassResult {
	return &ManagerStudentGetClassResult{}
}

var ManagerStudentGetClassResult_Success_DEFAULT *ClassC

func (p *ManagerStudentGetClassResult) GetSuccess() *ClassC {
	if !p.IsSetSuccess() {
		return ManagerStudentGetClassResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ManagerStudentGetClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetClassResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ClassC{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ManagerStudentGetClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetClassResult(%+v)", *p)
}

type ManagerStudentGetAllStudentArgs struct {
}

func NewManagerStudentGetAllStudentArgs() *ManagerStudentGetAllStudentArgs {
	return &ManagerStudentGetAllStudentArgs{}
}

func (p *ManagerStudentGetAllStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetAllStudentResult struct {
	Success StudentSlice `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetAllStudentResult() *ManagerStudentGetAllStudentResult {
	return &ManagerStudentGetAllStudentResult{}
}

var ManagerStudentGetAllStudentResult_Success_DEFAULT StudentSlice

func (p *ManagerStudentGetAllStudentResult) GetSuccess() StudentSlice {
	return p.Success
}
func (p *ManagerStudentGetAllStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetAllStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(StudentSlice, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &Student{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.Success = append(p.Success, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetAllStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllStudentResult(%+v)", *p)
}

type ManagerStudentGetAllClassArgs struct {
}

func NewManagerStudentGetAllClassArgs() *ManagerStudentGetAllClassArgs {
	return &ManagerStudentGetAllClassArgs{}
}

func (p *ManagerStudentGetAllClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetAllClassResult struct {
	Success ClassCSlice `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetAllClassResult() *ManagerStudentGetAllClassResult {
	return &ManagerStudentGetAllClassResult{}
}

var ManagerStudentGetAllClassResult_Success_DEFAULT ClassCSlice

func (p *ManagerStudentGetAllClassResult) GetSuccess() ClassCSlice {
	return p.Success
}
func (p *ManagerStudentGetAllClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetAllClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(ClassCSlice, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &ClassC{}
		if err := _elem39.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.Success = append(p.Success, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetAllClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllClassResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentGetAllStudentInClassArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentGetAllStudentInClassArgs() *ManagerStudentGetAllStudentInClassArgs {
	return &ManagerStudentGetAllStudentInClassArgs{}
}

func (p *ManagerStudentGetAllStudentInClassArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentGetAllStudentInClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllStudentInClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetAllStudentInClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllStudentInClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetAllStudentInClassResult struct {
	Success StudentInforSlice `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetAllStudentInClassResult() *ManagerStudentGetAllStudentInClassResult {
	return &ManagerStudentGetAllStudentInClassResult{}
}

var ManagerStudentGetAllStudentInClassResult_Success_DEFAULT StudentInforSlice

func (p *ManagerStudentGetAllStudentInClassResult) GetSuccess() StudentInforSlice {
	return p.Success
}
func (p *ManagerStudentGetAllStudentInClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetAllStudentInClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(StudentInforSlice, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &StudentInfor{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.Success = append(p.Success, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllStudentInClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllStudentInClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetAllStudentInClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllStudentInClassResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentGetAllClassOfStudentArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentGetAllClassOfStudentArgs() *ManagerStudentGetAllClassOfStudentArgs {
	return &ManagerStudentGetAllClassOfStudentArgs{}
}

func (p *ManagerStudentGetAllClassOfStudentArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentGetAllClassOfStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllClassOfStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentGetAllClassOfStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllClassOfStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentGetAllClassOfStudentResult struct {
	Success ClassInforSlices `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentGetAllClassOfStudentResult() *ManagerStudentGetAllClassOfStudentResult {
	return &ManagerStudentGetAllClassOfStudentResult{}
}

var ManagerStudentGetAllClassOfStudentResult_Success_DEFAULT ClassInforSlices

func (p *ManagerStudentGetAllClassOfStudentResult) GetSuccess() ClassInforSlices {
	return p.Success
}
func (p *ManagerStudentGetAllClassOfStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentGetAllClassOfStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(ClassInforSlices, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem41 := &ClassInfor{}
		if err := _elem41.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
		}
		p.Success = append(p.Success, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllClassOfStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentGetAllClassOfStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentGetAllClassOfStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentGetAllClassOfStudentResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentIsExistStudentArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentIsExistStudentArgs() *ManagerStudentIsExistStudentArgs {
	return &ManagerStudentIsExistStudentArgs{}
}

func (p *ManagerStudentIsExistStudentArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentIsExistStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentIsExistStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentIsExistStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentIsExistStudentResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentIsExistStudentResult() *ManagerStudentIsExistStudentResult {
	return &ManagerStudentIsExistStudentResult{}
}

var ManagerStudentIsExistStudentResult_Success_DEFAULT int32

func (p *ManagerStudentIsExistStudentResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentIsExistStudentResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentIsExistStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentIsExistStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentIsExistStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentIsExistStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistStudentResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentIsExistClassArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentIsExistClassArgs() *ManagerStudentIsExistClassArgs {
	return &ManagerStudentIsExistClassArgs{}
}

func (p *ManagerStudentIsExistClassArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentIsExistClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentIsExistClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentIsExistClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentIsExistClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentIsExistClassResult() *ManagerStudentIsExistClassResult {
	return &ManagerStudentIsExistClassResult{}
}

var ManagerStudentIsExistClassResult_Success_DEFAULT int32

func (p *ManagerStudentIsExistClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentIsExistClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentIsExistClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentIsExistClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentIsExistClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentIsExistClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistClassResult(%+v)", *p)
}

// Attributes:
//  - IdS
//  - IdC
type ManagerStudentIsExistStudentInClassArgs struct {
	IdS string `thrift:"idS,1" db:"idS" json:"idS"`
	IdC string `thrift:"idC,2" db:"idC" json:"idC"`
}

func NewManagerStudentIsExistStudentInClassArgs() *ManagerStudentIsExistStudentInClassArgs {
	return &ManagerStudentIsExistStudentInClassArgs{}
}

func (p *ManagerStudentIsExistStudentInClassArgs) GetIdS() string {
	return p.IdS
}

func (p *ManagerStudentIsExistStudentInClassArgs) GetIdC() string {
	return p.IdC
}
func (p *ManagerStudentIsExistStudentInClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IdS = v
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IdC = v
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistStudentInClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idS", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idS: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idS (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idS: ", p), err)
	}
	return err
}

func (p *ManagerStudentIsExistStudentInClassArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idC", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idC: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdC)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idC (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idC: ", p), err)
	}
	return err
}

func (p *ManagerStudentIsExistStudentInClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistStudentInClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentIsExistStudentInClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentIsExistStudentInClassResult() *ManagerStudentIsExistStudentInClassResult {
	return &ManagerStudentIsExistStudentInClassResult{}
}

var ManagerStudentIsExistStudentInClassResult_Success_DEFAULT int32

func (p *ManagerStudentIsExistStudentInClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentIsExistStudentInClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentIsExistStudentInClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentIsExistStudentInClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isExistStudentInClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentIsExistStudentInClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentIsExistStudentInClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentIsExistStudentInClassResult(%+v)", *p)
}

// Attributes:
//  - Infor
type ManagerStudentUpdateStudentArgs struct {
	Infor *StudentInfor `thrift:"infor,1" db:"infor" json:"infor"`
}

func NewManagerStudentUpdateStudentArgs() *ManagerStudentUpdateStudentArgs {
	return &ManagerStudentUpdateStudentArgs{}
}

var ManagerStudentUpdateStudentArgs_Infor_DEFAULT *StudentInfor

func (p *ManagerStudentUpdateStudentArgs) GetInfor() *StudentInfor {
	if !p.IsSetInfor() {
		return ManagerStudentUpdateStudentArgs_Infor_DEFAULT
	}
	return p.Infor
}
func (p *ManagerStudentUpdateStudentArgs) IsSetInfor() bool {
	return p.Infor != nil
}

func (p *ManagerStudentUpdateStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Infor = &StudentInfor{}
	if err := p.Infor.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Infor), err)
	}
	return nil
}

func (p *ManagerStudentUpdateStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infor", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infor: ", p), err)
	}
	if err := p.Infor.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Infor), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infor: ", p), err)
	}
	return err
}

func (p *ManagerStudentUpdateStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentUpdateStudentResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentUpdateStudentResult() *ManagerStudentUpdateStudentResult {
	return &ManagerStudentUpdateStudentResult{}
}

var ManagerStudentUpdateStudentResult_Success_DEFAULT int32

func (p *ManagerStudentUpdateStudentResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentUpdateStudentResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentUpdateStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentUpdateStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateStudentResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentUpdateStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentUpdateStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateStudentResult(%+v)", *p)
}

// Attributes:
//  - Infor
type ManagerStudentUpdateClassArgs struct {
	Infor *ClassInfor `thrift:"infor,1" db:"infor" json:"infor"`
}

func NewManagerStudentUpdateClassArgs() *ManagerStudentUpdateClassArgs {
	return &ManagerStudentUpdateClassArgs{}
}

var ManagerStudentUpdateClassArgs_Infor_DEFAULT *ClassInfor

func (p *ManagerStudentUpdateClassArgs) GetInfor() *ClassInfor {
	if !p.IsSetInfor() {
		return ManagerStudentUpdateClassArgs_Infor_DEFAULT
	}
	return p.Infor
}
func (p *ManagerStudentUpdateClassArgs) IsSetInfor() bool {
	return p.Infor != nil
}

func (p *ManagerStudentUpdateClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Infor = &ClassInfor{}
	if err := p.Infor.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Infor), err)
	}
	return nil
}

func (p *ManagerStudentUpdateClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("infor", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infor: ", p), err)
	}
	if err := p.Infor.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Infor), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infor: ", p), err)
	}
	return err
}

func (p *ManagerStudentUpdateClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentUpdateClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentUpdateClassResult() *ManagerStudentUpdateClassResult {
	return &ManagerStudentUpdateClassResult{}
}

var ManagerStudentUpdateClassResult_Success_DEFAULT int32

func (p *ManagerStudentUpdateClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentUpdateClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentUpdateClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentUpdateClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentUpdateClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentUpdateClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentUpdateClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentUpdateClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentUpdateClassResult(%+v)", *p)
}

// Attributes:
//  - IdS
//  - IdC
type ManagerStudentAddStudentToClassArgs struct {
	IdS string `thrift:"idS,1" db:"idS" json:"idS"`
	IdC string `thrift:"idC,2" db:"idC" json:"idC"`
}

func NewManagerStudentAddStudentToClassArgs() *ManagerStudentAddStudentToClassArgs {
	return &ManagerStudentAddStudentToClassArgs{}
}

func (p *ManagerStudentAddStudentToClassArgs) GetIdS() string {
	return p.IdS
}

func (p *ManagerStudentAddStudentToClassArgs) GetIdC() string {
	return p.IdC
}
func (p *ManagerStudentAddStudentToClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IdS = v
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IdC = v
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStudentToClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idS", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idS: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idS (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idS: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddStudentToClassArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idC", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idC: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdC)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idC (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idC: ", p), err)
	}
	return err
}

func (p *ManagerStudentAddStudentToClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddStudentToClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentAddStudentToClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentAddStudentToClassResult() *ManagerStudentAddStudentToClassResult {
	return &ManagerStudentAddStudentToClassResult{}
}

var ManagerStudentAddStudentToClassResult_Success_DEFAULT int32

func (p *ManagerStudentAddStudentToClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentAddStudentToClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentAddStudentToClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentAddStudentToClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStudentToClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentAddStudentToClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentAddStudentToClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentAddStudentToClassResult(%+v)", *p)
}

// Attributes:
//  - IdS
//  - IdC
type ManagerStudentRemoveStudentInClassArgs struct {
	IdS string `thrift:"idS,1" db:"idS" json:"idS"`
	IdC string `thrift:"idC,2" db:"idC" json:"idC"`
}

func NewManagerStudentRemoveStudentInClassArgs() *ManagerStudentRemoveStudentInClassArgs {
	return &ManagerStudentRemoveStudentInClassArgs{}
}

func (p *ManagerStudentRemoveStudentInClassArgs) GetIdS() string {
	return p.IdS
}

func (p *ManagerStudentRemoveStudentInClassArgs) GetIdC() string {
	return p.IdC
}
func (p *ManagerStudentRemoveStudentInClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IdS = v
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IdC = v
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeStudentInClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idS", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idS: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idS (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idS: ", p), err)
	}
	return err
}

func (p *ManagerStudentRemoveStudentInClassArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idC", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idC: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdC)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idC (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idC: ", p), err)
	}
	return err
}

func (p *ManagerStudentRemoveStudentInClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveStudentInClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentRemoveStudentInClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentRemoveStudentInClassResult() *ManagerStudentRemoveStudentInClassResult {
	return &ManagerStudentRemoveStudentInClassResult{}
}

var ManagerStudentRemoveStudentInClassResult_Success_DEFAULT int32

func (p *ManagerStudentRemoveStudentInClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentRemoveStudentInClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentRemoveStudentInClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentRemoveStudentInClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeStudentInClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentInClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentRemoveStudentInClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveStudentInClassResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentRemoveStudentArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentRemoveStudentArgs() *ManagerStudentRemoveStudentArgs {
	return &ManagerStudentRemoveStudentArgs{}
}

func (p *ManagerStudentRemoveStudentArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentRemoveStudentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentRemoveStudentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeStudent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentRemoveStudentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentRemoveStudentResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentRemoveStudentResult() *ManagerStudentRemoveStudentResult {
	return &ManagerStudentRemoveStudentResult{}
}

var ManagerStudentRemoveStudentResult_Success_DEFAULT int32

func (p *ManagerStudentRemoveStudentResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentRemoveStudentResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentRemoveStudentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentRemoveStudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentRemoveStudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeStudent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentRemoveStudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveStudentResult(%+v)", *p)
}

// Attributes:
//  - ID
type ManagerStudentRemoveClassArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewManagerStudentRemoveClassArgs() *ManagerStudentRemoveClassArgs {
	return &ManagerStudentRemoveClassArgs{}
}

func (p *ManagerStudentRemoveClassArgs) GetID() string {
	return p.ID
}
func (p *ManagerStudentRemoveClassArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveClassArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ManagerStudentRemoveClassArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeClass_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ManagerStudentRemoveClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveClassArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ManagerStudentRemoveClassResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewManagerStudentRemoveClassResult() *ManagerStudentRemoveClassResult {
	return &ManagerStudentRemoveClassResult{}
}

var ManagerStudentRemoveClassResult_Success_DEFAULT int32

func (p *ManagerStudentRemoveClassResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ManagerStudentRemoveClassResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ManagerStudentRemoveClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ManagerStudentRemoveClassResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ManagerStudentRemoveClassResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ManagerStudentRemoveClassResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeClass_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ManagerStudentRemoveClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ManagerStudentRemoveClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManagerStudentRemoveClassResult(%+v)", *p)
}
